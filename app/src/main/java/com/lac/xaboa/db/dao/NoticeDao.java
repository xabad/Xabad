package com.lac.xaboa.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lac.xaboa.db.model.Notice;
import com.lac.xaboa.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTICE.
*/
public class NoticeDao extends AbstractDao<Notice, Long> {

    public static final String TABLENAME = "NOTICE";

    /**
     * Properties of entity Notice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Notice_no = new Property(2, String.class, "notice_no", false, "NOTICE_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Folder = new Property(5, String.class, "folder", false, "FOLDER");
        public final static Property Add_file = new Property(6, String.class, "add_file", false, "ADD_FILE");
        public final static Property User_id = new Property(7, String.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(8, String.class, "user_name", false, "USER_NAME");
        public final static Property Create_time = new Property(9, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(10, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Is_del = new Property(11, String.class, "is_del", false, "IS_DEL");
    };


    public NoticeDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTICE' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'ID' TEXT," + // 1: id
                "'NOTICE_NO' TEXT," + // 2: notice_no
                "'NAME' TEXT," + // 3: name
                "'CONTENT' TEXT," + // 4: content
                "'FOLDER' TEXT," + // 5: folder
                "'ADD_FILE' TEXT," + // 6: add_file
                "'USER_ID' TEXT," + // 7: user_id
                "'USER_NAME' TEXT," + // 8: user_name
                "'CREATE_TIME' TEXT," + // 9: create_time
                "'UPDATE_TIME' TEXT," + // 10: update_time
                "'IS_DEL' TEXT);"); // 11: is_del
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notice entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String notice_no = entity.getNotice_no();
        if (notice_no != null) {
            stmt.bindString(3, notice_no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(6, folder);
        }
 
        String add_file = entity.getAdd_file();
        if (add_file != null) {
            stmt.bindString(7, add_file);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(8, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(9, user_name);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(10, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(11, update_time);
        }
 
        String is_del = entity.getIs_del();
        if (is_del != null) {
            stmt.bindString(12, is_del);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Notice readEntity(Cursor cursor, int offset) {
        Notice entity = new Notice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // notice_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // folder
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // add_file
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // user_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // create_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // update_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // is_del
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notice entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNotice_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFolder(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdd_file(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreate_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdate_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_del(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Notice entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Notice entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
