package com.lac.xaboa.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lac.xaboa.db.model.Flow;
import com.lac.xaboa.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FLOW.
*/
public class FlowDao extends AbstractDao<Flow, Long> {

    public static final String TABLENAME = "FLOW";

    /**
     * Properties of entity Flow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Doc_no = new Property(2, String.class, "doc_no", false, "DOC_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Confirm = new Property(5, String.class, "confirm", false, "CONFIRM");
        public final static Property Confirm_name = new Property(6, String.class, "confirm_name", false, "CONFIRM_NAME");
        public final static Property Consult = new Property(7, String.class, "consult", false, "CONSULT");
        public final static Property Consult_name = new Property(8, String.class, "consult_name", false, "CONSULT_NAME");
        public final static Property Refer = new Property(9, String.class, "refer", false, "REFER");
        public final static Property Refer_name = new Property(10, String.class, "refer_name", false, "REFER_NAME");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property Add_file = new Property(12, String.class, "add_file", false, "ADD_FILE");
        public final static Property User_id = new Property(13, String.class, "user_id", false, "USER_ID");
        public final static Property Emp_no = new Property(14, String.class, "emp_no", false, "EMP_NO");
        public final static Property User_name = new Property(15, String.class, "user_name", false, "USER_NAME");
        public final static Property Dept_id = new Property(16, String.class, "dept_id", false, "DEPT_ID");
        public final static Property Dept_name = new Property(17, String.class, "dept_name", false, "DEPT_NAME");
        public final static Property Create_date = new Property(18, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Create_time = new Property(19, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(20, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Step = new Property(21, String.class, "step", false, "STEP");
        public final static Property Is_del = new Property(22, String.class, "is_del", false, "IS_DEL");
    };


    public FlowDao(DaoConfig config) {
        super(config);
    }
    
    public FlowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FLOW' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'ID' TEXT," + // 1: id
                "'DOC_NO' TEXT," + // 2: doc_no
                "'NAME' TEXT," + // 3: name
                "'CONTENT' TEXT," + // 4: content
                "'CONFIRM' TEXT," + // 5: confirm
                "'CONFIRM_NAME' TEXT," + // 6: confirm_name
                "'CONSULT' TEXT," + // 7: consult
                "'CONSULT_NAME' TEXT," + // 8: consult_name
                "'REFER' TEXT," + // 9: refer
                "'REFER_NAME' TEXT," + // 10: refer_name
                "'TYPE' TEXT," + // 11: type
                "'ADD_FILE' TEXT," + // 12: add_file
                "'USER_ID' TEXT," + // 13: user_id
                "'EMP_NO' TEXT," + // 14: emp_no
                "'USER_NAME' TEXT," + // 15: user_name
                "'DEPT_ID' TEXT," + // 16: dept_id
                "'DEPT_NAME' TEXT," + // 17: dept_name
                "'CREATE_DATE' TEXT," + // 18: create_date
                "'CREATE_TIME' TEXT," + // 19: create_time
                "'UPDATE_TIME' TEXT," + // 20: update_time
                "'STEP' TEXT," + // 21: step
                "'IS_DEL' TEXT);"); // 22: is_del
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FLOW'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Flow entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String doc_no = entity.getDoc_no();
        if (doc_no != null) {
            stmt.bindString(3, doc_no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String confirm = entity.getConfirm();
        if (confirm != null) {
            stmt.bindString(6, confirm);
        }
 
        String confirm_name = entity.getConfirm_name();
        if (confirm_name != null) {
            stmt.bindString(7, confirm_name);
        }
 
        String consult = entity.getConsult();
        if (consult != null) {
            stmt.bindString(8, consult);
        }
 
        String consult_name = entity.getConsult_name();
        if (consult_name != null) {
            stmt.bindString(9, consult_name);
        }
 
        String refer = entity.getRefer();
        if (refer != null) {
            stmt.bindString(10, refer);
        }
 
        String refer_name = entity.getRefer_name();
        if (refer_name != null) {
            stmt.bindString(11, refer_name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String add_file = entity.getAdd_file();
        if (add_file != null) {
            stmt.bindString(13, add_file);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(14, user_id);
        }
 
        String emp_no = entity.getEmp_no();
        if (emp_no != null) {
            stmt.bindString(15, emp_no);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(16, user_name);
        }
 
        String dept_id = entity.getDept_id();
        if (dept_id != null) {
            stmt.bindString(17, dept_id);
        }
 
        String dept_name = entity.getDept_name();
        if (dept_name != null) {
            stmt.bindString(18, dept_name);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(19, create_date);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(20, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(21, update_time);
        }
 
        String step = entity.getStep();
        if (step != null) {
            stmt.bindString(22, step);
        }
 
        String is_del = entity.getIs_del();
        if (is_del != null) {
            stmt.bindString(23, is_del);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Flow readEntity(Cursor cursor, int offset) {
        Flow entity = new Flow( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // doc_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // confirm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // confirm_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // consult
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // consult_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // refer
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // refer_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // add_file
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // user_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // emp_no
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // user_name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // dept_id
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // dept_name
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // create_date
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // create_time
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // update_time
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // step
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // is_del
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Flow entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDoc_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setConfirm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConfirm_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setConsult(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setConsult_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRefer(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRefer_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAdd_file(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUser_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEmp_no(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUser_name(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDept_id(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDept_name(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreate_date(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreate_time(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUpdate_time(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStep(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIs_del(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Flow entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Flow entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
