package com.lac.xaboa.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lac.xaboa.db.model.Member;
import com.lac.xaboa.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEMBER.
*/
public class MemberDao extends AbstractDao<Member, Long> {

    public static final String TABLENAME = "MEMBER";

    /**
     * Properties of entity Member.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Emp_no = new Property(2, String.class, "emp_no", false, "EMP_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Letter = new Property(4, String.class, "letter", false, "LETTER");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property Dept_id = new Property(6, String.class, "dept_id", false, "DEPT_ID");
        public final static Property Position_id = new Property(7, String.class, "position_id", false, "POSITION_ID");
        public final static Property Rank_id = new Property(8, String.class, "rank_id", false, "RANK_ID");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(10, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Last_login_ip = new Property(11, String.class, "last_login_ip", false, "LAST_LOGIN_IP");
        public final static Property Login_count = new Property(12, String.class, "login_count", false, "LOGIN_COUNT");
        public final static Property Pic = new Property(13, String.class, "pic", false, "PIC");
        public final static Property Email = new Property(14, String.class, "email", false, "EMAIL");
        public final static Property Duty = new Property(15, String.class, "duty", false, "DUTY");
        public final static Property Office_tel = new Property(16, String.class, "office_tel", false, "OFFICE_TEL");
        public final static Property Mobile_tel = new Property(17, String.class, "mobile_tel", false, "MOBILE_TEL");
        public final static Property Create_time = new Property(18, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(19, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Is_del = new Property(20, String.class, "is_del", false, "IS_DEL");
        public final static Property Openid = new Property(21, String.class, "openid", false, "OPENID");
        public final static Property Westatus = new Property(22, String.class, "westatus", false, "WESTATUS");
        public final static Property Error = new Property(23, String.class, "error", false, "ERROR");
        public final static Property Emp_randid = new Property(24, String.class, "emp_randid", false, "EMP_RANDID");
    };


    public MemberDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEMBER' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'ID' TEXT," + // 1: id
                "'EMP_NO' TEXT," + // 2: emp_no
                "'NAME' TEXT," + // 3: name
                "'LETTER' TEXT," + // 4: letter
                "'PASSWORD' TEXT," + // 5: password
                "'DEPT_ID' TEXT," + // 6: dept_id
                "'POSITION_ID' TEXT," + // 7: position_id
                "'RANK_ID' TEXT," + // 8: rank_id
                "'SEX' TEXT," + // 9: sex
                "'BIRTHDAY' TEXT," + // 10: birthday
                "'LAST_LOGIN_IP' TEXT," + // 11: last_login_ip
                "'LOGIN_COUNT' TEXT," + // 12: login_count
                "'PIC' TEXT," + // 13: pic
                "'EMAIL' TEXT," + // 14: email
                "'DUTY' TEXT," + // 15: duty
                "'OFFICE_TEL' TEXT," + // 16: office_tel
                "'MOBILE_TEL' TEXT," + // 17: mobile_tel
                "'CREATE_TIME' TEXT," + // 18: create_time
                "'UPDATE_TIME' TEXT," + // 19: update_time
                "'IS_DEL' TEXT," + // 20: is_del
                "'OPENID' TEXT," + // 21: openid
                "'WESTATUS' TEXT," + // 22: westatus
                "'ERROR' TEXT," + // 23: error
                "'EMP_RANDID' TEXT);"); // 24: emp_randid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEMBER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Member entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String emp_no = entity.getEmp_no();
        if (emp_no != null) {
            stmt.bindString(3, emp_no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String letter = entity.getLetter();
        if (letter != null) {
            stmt.bindString(5, letter);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }
 
        String dept_id = entity.getDept_id();
        if (dept_id != null) {
            stmt.bindString(7, dept_id);
        }
 
        String position_id = entity.getPosition_id();
        if (position_id != null) {
            stmt.bindString(8, position_id);
        }
 
        String rank_id = entity.getRank_id();
        if (rank_id != null) {
            stmt.bindString(9, rank_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String last_login_ip = entity.getLast_login_ip();
        if (last_login_ip != null) {
            stmt.bindString(12, last_login_ip);
        }
 
        String login_count = entity.getLogin_count();
        if (login_count != null) {
            stmt.bindString(13, login_count);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(14, pic);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(15, email);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(16, duty);
        }
 
        String office_tel = entity.getOffice_tel();
        if (office_tel != null) {
            stmt.bindString(17, office_tel);
        }
 
        String mobile_tel = entity.getMobile_tel();
        if (mobile_tel != null) {
            stmt.bindString(18, mobile_tel);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(19, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(20, update_time);
        }
 
        String is_del = entity.getIs_del();
        if (is_del != null) {
            stmt.bindString(21, is_del);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(22, openid);
        }
 
        String westatus = entity.getWestatus();
        if (westatus != null) {
            stmt.bindString(23, westatus);
        }
 
        String error = entity.getError();
        if (error != null) {
            stmt.bindString(24, error);
        }
 
        String emp_randid = entity.getEmp_randid();
        if (emp_randid != null) {
            stmt.bindString(25, emp_randid);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Member readEntity(Cursor cursor, int offset) {
        Member entity = new Member( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emp_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // letter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // password
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dept_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // position_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rank_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // last_login_ip
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // login_count
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // pic
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // email
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // duty
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // office_tel
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // mobile_tel
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // create_time
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // update_time
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // is_del
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // openid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // westatus
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // error
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // emp_randid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Member entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmp_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLetter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDept_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPosition_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRank_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLast_login_ip(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLogin_count(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPic(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEmail(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDuty(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOffice_tel(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMobile_tel(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCreate_time(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUpdate_time(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIs_del(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setOpenid(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setWestatus(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setError(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setEmp_randid(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Member entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Member entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
