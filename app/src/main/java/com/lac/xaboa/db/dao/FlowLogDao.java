package com.lac.xaboa.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lac.xaboa.db.model.FlowLog;
import com.lac.xaboa.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FLOW_LOG.
*/
public class FlowLogDao extends AbstractDao<FlowLog, Long> {

    public static final String TABLENAME = "FLOW_LOG";

    /**
     * Properties of entity FlowLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Flow_id = new Property(2, String.class, "flow_id", false, "FLOW_ID");
        public final static Property Emp_no = new Property(3, String.class, "emp_no", false, "EMP_NO");
        public final static Property User_id = new Property(4, String.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(5, String.class, "user_name", false, "USER_NAME");
        public final static Property Step = new Property(6, String.class, "step", false, "STEP");
        public final static Property Result = new Property(7, String.class, "result", false, "RESULT");
        public final static Property Create_time = new Property(8, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(9, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Comment = new Property(10, String.class, "comment", false, "COMMENT");
        public final static Property Is_read = new Property(11, String.class, "is_read", false, "IS_READ");
    };


    public FlowLogDao(DaoConfig config) {
        super(config);
    }
    
    public FlowLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FLOW_LOG' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'ID' TEXT," + // 1: id
                "'FLOW_ID' TEXT," + // 2: flow_id
                "'EMP_NO' TEXT," + // 3: emp_no
                "'USER_ID' TEXT," + // 4: user_id
                "'USER_NAME' TEXT," + // 5: user_name
                "'STEP' TEXT," + // 6: step
                "'RESULT' TEXT," + // 7: result
                "'CREATE_TIME' TEXT," + // 8: create_time
                "'UPDATE_TIME' TEXT," + // 9: update_time
                "'COMMENT' TEXT," + // 10: comment
                "'IS_READ' TEXT);"); // 11: is_read
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FLOW_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FlowLog entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String flow_id = entity.getFlow_id();
        if (flow_id != null) {
            stmt.bindString(3, flow_id);
        }
 
        String emp_no = entity.getEmp_no();
        if (emp_no != null) {
            stmt.bindString(4, emp_no);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(5, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(6, user_name);
        }
 
        String step = entity.getStep();
        if (step != null) {
            stmt.bindString(7, step);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(10, update_time);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(11, comment);
        }
 
        String is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindString(12, is_read);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FlowLog readEntity(Cursor cursor, int offset) {
        FlowLog entity = new FlowLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // flow_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // emp_no
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // step
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // result
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // create_time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // update_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // comment
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // is_read
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FlowLog entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlow_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmp_no(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStep(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setResult(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreate_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdate_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComment(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_read(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FlowLog entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FlowLog entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
